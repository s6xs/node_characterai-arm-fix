import DMConversation from "../chat/dmConversation";
import { PreviewDMConversation } from "../chat/previewDMConversation";
import { CharacterAI } from "../client";
import { PrivateProfile } from "../profile/privateProfile";
import { PublicProfile } from "../profile/publicProfile";
import { CAIImage as CAIImage } from "../utils/image";
import { Specable } from "../utils/specable";
import { ReportCharacterReason } from "./reportCharacter";
import { CAIVoice } from "../voice";
import { CharacterVisibility, CharacterVote, ICharacterModificationOptions } from "./characterEnums";
import { Persona } from "../profile/persona";
export interface ICharacterGroupChatCreation {
    name: string;
    characters: Character[] | string[];
    anyoneCanJoin: boolean;
    requireApproval: boolean;
    withGreeting: boolean;
}
export declare class Character extends Specable {
    protected client: CharacterAI;
    private external_id;
    private set character_id(value);
    get externalId(): string;
    set externalId(value: string);
    get characterId(): string;
    set characterId(value: string);
    private title;
    get tagline(): string;
    set tagline(value: string);
    description: string;
    identifier: string;
    visibility: CharacterVisibility;
    private set character_visibility(value);
    copyable: boolean;
    greeting: string;
    avatar: CAIImage;
    songs: any[];
    private img_gen_enabled;
    get imageGenerationEnabled(): boolean;
    set imageGenerationEnabled(value: boolean);
    private dynamic_greeting_enabled?;
    private allow_dynamic_greeting?;
    get dynamicGreetingEnabled(): boolean | undefined;
    set dynamicGreetingEnabled(value: boolean | undefined);
    private base_img_prompt;
    get baseImagePrompt(): string;
    set baseImagePrompt(value: string);
    private img_prompt_regex;
    get imagePromptRegex(): string;
    set imagePromptRegex(value: string);
    private strip_img_prompt_from_msg;
    get stripImagePromptFromMessage(): boolean;
    set stripImagePromptFromMessage(value: boolean);
    private starter_prompts;
    get starterPrompts(): never[];
    set starterPrompts(value: never[]);
    private comments_enabled;
    get commentsEnabled(): boolean;
    set commentsEnabled(value: boolean);
    private short_hash;
    get shortHash(): string;
    set shortHash(value: string);
    usage: string;
    definition: string;
    private default_voice_id;
    get defaultVoiceId(): string;
    set defaultVoiceId(value: string);
    private participant__name?;
    private name?;
    private participant__user__username?;
    private character_name?;
    get displayName(): string | undefined;
    set displayName(value: string | undefined);
    protected user__username: string;
    private participant__num_interactions?;
    private num_interactions?;
    get interactionCount(): string | undefined;
    set interactionCount(value: string | undefined);
    private num_likes;
    get likeCount(): number;
    private num_interactions_last_day;
    get interactionCountLastDay(): number;
    private has_definition;
    get hasDefinition(): boolean;
    safety: string;
    private user__id;
    private set creator_id(value);
    get userId(): number;
    set userId(value: number);
    private is_licensed_professional;
    upvotes: number;
    translations: any;
    private set character_translations(value);
    getDefaultVoice(): Promise<CAIVoice>;
    getDMs(turnPreviewCount?: number, refreshChats?: boolean): Promise<PreviewDMConversation[]>;
    private internalDM;
    createDM(withGreeting?: boolean): Promise<DMConversation>;
    DM(specificChatId?: string): Promise<DMConversation>;
    createGroupChat(options: ICharacterGroupChatCreation): Promise<void>;
    getAuthorProfile(): Promise<PublicProfile | PrivateProfile>;
    getVote(): Promise<CharacterVote>;
    setVote(vote: CharacterVote): Promise<void>;
    hide(): Promise<void>;
    setVoiceOverride(voiceOrId: CAIVoice | string): Promise<void>;
    getVoiceOverride(): Promise<string | undefined>;
    getSimilarCharacters(): Promise<Character[]>;
    report(reason: ReportCharacterReason, additionalDetails?: string): Promise<string>;
    private internalEdit;
    edit(options?: ICharacterModificationOptions): Promise<void>;
    delete(): Promise<void>;
    setPersonaOverride(personaOrId: string | Persona): Promise<void>;
    getPersonaOverride(): Promise<Persona | undefined>;
    constructor(client: CharacterAI, information: any);
}
export { CharacterVisibility };
//# sourceMappingURL=character.d.ts.map